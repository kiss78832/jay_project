
一、new AnnotationConfigApplicationContext(ConfigTest.class);
	->register(annotatedClasses)、refresh();
1.Spring容器refresh()[創建刷新](將Debug模式點選在refresh()上，進行過程探討)
	[AbstractApplicationContext.java]
	(1).prepareRefresh()刷新前的準備動作;
		A).this.scanner.clearCache();//清緩存
		B).super.prepareRefresh();//準備刷新
			a).this.startupDate = System.currentTimeMillis();//紀錄時間
			b).this.closed.set(false);//紀錄是否關閉
			c).this.active.set(true);//紀錄是否開啟
			d).logger.info("Refreshing " + this);//console 印出
		 	e).initPropertySources();//For subclasses: do nothing by default.[初始化一些屬性設定，子類自定義個性化的屬性設置方法]
			f).getEnvironment().validateRequiredProperties();//檢驗屬性的合法等
			g).this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();//保存容器中的一些早期事件，在給予派發。
				
	(2).obtainFreshBeanFactory();//獲取BeanFactory  [obtain 獲取]
		A).refreshBeanFactory();//刷新(或創建)BeanFactory、是個抽象方法、被GenericApplicationContext繼承實作refreshBeanFactory()
			a).GenericApplicationContext建構子:
				創建了一個 this.beanFactory = new DefaultListableBeanFactory();
			b).進入實作refreshBeanFactory():
				this.beanFactory.setSerializationId(getId());//設置序列化ID
		B).getBeanFactory();//返回剛才GenericApplicationContext創建的BeanFactory對象
		C).obtainFreshBeanFactory()返回 BeanFactory[DefaultListableBeanFactory]
		
	(3).prepareBeanFactory(beanFactory); //BeanFactory的預先準備工作(對BeanFactory進行一些設置):
		A).設置BeanFactory的類別加載器、支持表達是式解析器等等許多工具
			(ex:setBeanClassLoader、setBeanExpressionResolver、addPropertyEditorRegistrar、addPropertyEditorRegistrar)
		B).添加部分beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));
		C).設置"忽略"的自動裝配的介面 beanFactory.ignoreDependencyInterface(XXX.class)
			a).ResourceLoaderAware.class
			b).ApplicationEventPublisherAware.class
			c).MessageSourceAware.class
			d).ApplicationContextAware.class
			e).EnvironmentAware.class
		D).註冊可以解析的自動裝配，我們能在任何元件中"自動注入"。beanFactory.registerResolvableDependency(XXX)
			a).BeanFactory.class //Bean工廠
			b).ResourceLoader.class //
			c).ApplicationEventPublisher.class //事件派發器
			d).ApplicationContext.class //IOC容器
		E).if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {...} //添加編譯時的AspectJ
		F).beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment()); //給BeanFactory中註冊一些能用的元件 [Register default environment beans.]
			a).beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment()); //[ConfigurableEnvironment environment] 註冊environment
			b).beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties()); //[Map<String,Object> systemProperties] 獲取系統屬性
			c).beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment()); //[Map<String, Object> systemEnvironment] 環境訊息
	(4).postProcessBeanFactory(beanFactory);//BeanFactory準備工作完成後，進行的後置處理工作		
		A).子類通過"重寫這個方法"來在BeanFactory創建並預準備完成以後做進一步的設置
		
======================== 以上是BeanFactory的創建及預先準備動作 ===========================	

	(5).invokeBeanFactoryPostProcessors(beanFactory);//調用BeanFactoryPostProcessors方法
		A).BeanFactoryPostProcessors:BeanFactory後置處理器。在BeanFactory標準初始化之後執行的"兩個"動作。
			a). 執行[BeanFactoryPostProcessor]
				但會優先執行內部的[BeanDefinitionRegistryPostProcessor]
				if (beanFactory instanceof BeanDefinitionRegistry)//判斷是否為BeanDefinitionRegistry
				if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) 判斷是否為BeanDefinitionRegistryPostProcessor，
					是的話新增BeanDefinitionRegistryPostProcessor的List，若不是新增在BeanFactoryPostProcessor的List當中
				
				//獲取所有的BeanDefinitionRegistryPostProcessor
				String[] postProcessorNames =beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);	
				
				//First[步驟一]
				//遍歷postProcessorNames[]，判斷是否實現PriorityOrdered.class介面，去"判斷優先級排序"
				for (String ppName : postProcessorNames){
					if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)){
						Set<String> processedBeans = new HashSet<String>();
						//把有實作優先級的加入集合
						processedBeans.add(ppName);
					}
				}
				//排序優先順序
				sortPostProcessors(beanFactory, priorityOrderedPostProcessors);
				//排完順序，繼續執行invokeBeanDefinitionRegistryPostProcessors()->
					//postProcessor.postProcessBeanDefinitionRegistry(registry);
				invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry);
				
				//Next[步驟二]
				//判斷是否實作Ordered.class，
				if (!processedBeans.contains(ppName) && beanFactory.isTypeMatch(ppName, Ordered.class)) {
					orderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
					//加入集合
					processedBeans.add(ppName);
				}
				//排序優先順序(同上)
				sortPostProcessors(beanFactory, orderedPostProcessors);
				//排序完繼續執行invokeBeanDefinitionRegistryPostProcessors()
				invokeBeanDefinitionRegistryPostProcessors(orderedPostProcessors, registry);
				
				//Finally[步驟三]
				//最後執行沒有實現任何優先級(PriorityOrdered)或是順序(Ordered)介面的BeanDefinitionRegistryPostProcessors
				invokeBeanDefinitionRegistryPostProcessors(orderedPostProcessors, registry);
				
				// Now, invoke the postProcessBeanFactory callback of all processors handled so far.
				//會執行所有註冊@Bean的方法
				invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);
				invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);
				
			b). 內部執行完，執行BeanFactoryPostProcessor [邏輯與上面相同]
				  ● 獲取所有的BeanFactoryPostProcessor
				  ● 看的執行實作PriorityOrdered(優先級介面)的BeanFactoryPostProcessor，並放在priorityOrderedPostProcessors集合
				  ● 看的執行實作Order(排序介面)的BeanFactoryPostProcessor，並放在orderedPostProcessorNames集合
				  ● 看的執行都"未實作"任何介面的BeanFactoryPostProcessor，並放在nonOrderedPostProcessorNames集合
				  							 =========== 三個集合都會各自"排序後立刻執行" =========
				  ● sortPostProcessors(beanFactory, priorityOrderedPostProcessors); //排序 
				  ● invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry); //執行
				  						     ===========         ==========          =========

	(6).registerBeanPostProcessors(beanFactory) //註冊Bean後置處理器[intercept bean creation 攔截Bean的創建過程]
		
		不同介面的類型的BeanBeanPostProcessor，在Bean創建前後的執行時機是不一樣的。
		DestructionAwareBeanPostProcessor
		InstantiationAwareBeanPostProcessor
		  ->SmartInstantiationAwareBeanPostProcessor  
		MergedBeanDefinitionPostProcessor
		
		A).獲取所有的BeanPostProcessor，後置處理器都默認可以通過PriorityOrdered、Ordered介面執行優先級
		      依照各種類型加入不同的集合。(priorityOrderedPostProcessors、internalPostProcessors、orderedPostProcessorNames、nonOrderedPostProcessorNames)
		B).先註冊PriorityOrdered優先級介面的BeanPostProcessor → 在註冊Ordered介面的  → 再註冊沒有實現任何介面的  → 最後註冊internalBeanPostProcessors.(這集合放的都是MergedBeanDefinitionPostProcessor)
			[每個都依照步驟a.b去做]
			a.sortPostProcessors(beanFactory, priorityOrderedPostProcessors);//先把每個集合排序過後
			b.registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);//註冊BeanPostProcessors(後置處理器)
				→beanFactory.addBeanPostProcessor(postProcessor);把每一個BeanPostProcessor，添加到BeanFactory中。
		C).beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext)
		   //最終添加ApplicationListenerDetector後置處理器，在Bean創建完成後檢查是否為ApplicationListener
		   //是的話this.applicationContext.addApplicationListener((ApplicationListener<?>) bean);
	
	(7).initMessageSource() //初始化MessageSource元件(做國際化功能、消息綁定、消息解析)
		A).獲取BeanFactory [ConfigurableListableBeanFactory beanFactory = getBeanFactory();]
		B).看容器中是否有id為messagesource的，類型是MessageSource元件
		       如果有賦值給messagesource，如果沒有自己創建一個DelegatingMessageSource。
		       MessageSource:取出國際化配置文件中的某個Key的值，能按照區域訊息獲取。
		C).把創建好的MessageSource註冊在容器中，以後獲取國際化配置文件值的時候，可以自動注入MessageSource
			  beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
			  MessageSource.String getMessage(String code, Object[] args, String defaultMessage, Locale locale);
		       
	(8).initApplicationEventMulticaster() //初始化事件多播(派發)器
		A).獲取beanFactory
		B).從beanFactory中獲取applicationEventMulticaster的ApplicationEventMulticaster
			a).if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) { ....
		C).如果上一步沒有配置，創建一個SimpleApplicationEventMulticaster
			a).else {
					this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory); 
					...
		D).將創建的ApplicationEventMulticaster添加到beanFactory中，以後就該元件就能自動注入
	
	(9).onRefresh() //留給子容器(子類)
		A).子類可重寫此方法，在容器刷新的時候可以自定義邏輯
	
	(10).registerListeners() //給容器中所有項目裡面的ApplicationListener註冊近來
		A).從容器中拿到所有的ApplicationListener	
			a).String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false); //拿到所有Bean的名稱
		B).將每個監聽器添加到事件派發器中
			b).for (String listenerBeanName : listenerBeanNames) {
					getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
				}
		C).派發之前步驟產生事件	
		
      ★(11).finishBeanFactoryInitialization(beanFactory) //初始化剩下的單實例Bean
      	A).beanFactory.preInstantiateSingletons() //初始化剩下的單實例Bean
      		a).獲取容器中所有Bean，依次進行初始化和創建對象
      	B).獲取Bean的定義訊息 RootBeanDefinition
      	C).Bean不是抽象的，是單實例，是懶加載
      	    if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) { ...
      		a).判斷是否是FactoryBean，是否實現FactoryBean介面的Bean
      			if (isFactoryBean(beanName)) {...
      		b).不是工廠Bean，利用getBean(beanName) 創建對象
      			1.getBean(beanName) -> IOC.getBean()
      		       ★2.doGetBean(name,null,null,false)
      			3.先獲取緩存中保存的單實例Bean。如果能獲取到說明這個Bean之前被創建過(所有創建過的單實例Bean都會被緩存起來)
      				從private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256)獲取的
      			4.緩存中獲取不到，開始Bean的創建對象流程
      			5.標記當前Bean已經被創建
      			6.獲取當前的Bean依賴的其他Bean，如果有按照getBean()把依賴的Bean先創建出來
      			7.啟動單實例Bean的創建流程
      				1).creatBean(beanName,mbd,args);
      				2).Object bean = resolveBeforeInstantiation(beanName, mbdToUse); //讓BeanPostProcessor先攔截返回代理對象
	      			     【InstantiationAwareBeanPostProcessor】  提前執行
	      			      先觸發:applyBeanPostProcessorsBeforeInstantiation
	      			      如有返回值，觸發applyBeanPostProcessorsAfterInstantiation
	      			3).如果前面的InstantiationAwareBeanPostProcessor沒有返回對象
	      		    4).Object beanInstance = doCreateBean(beanName, mbdToUse, args); //創建Bean
	      		    	 4-1).【創建Bean實例】 instanceWrapper = createBeanInstance(beanName, mbd, args);
	      		    	 	    利用工廠方法或者物件建構子創建出Bean實例
	      		    	 4-2).applyMergedBeanDefinitionPostProcessors(mbd,beanType,beanName)
	      		    	 	    調用MergedBeanDefinitionPostProcessord的postProcessMergedBeanDefinition(mbd, beanType, beanName);
	      		    	 4-3).【Bean屬性復值】populateBean(beanName, RootBeanDefinition mbd, instanceWrapper) 
	      		    	 	      賦值之前:
	      		    	 	      ● 拿到InstanticationAwareBeanPostProcessor後置處理器
	      		    	 	      		postProcessAfterInstantiation()
	      		    	 	      ● 拿到InstanticationAwareBeanPostProcessor後置處理器
	      		    	 	      		postProcessPropertyBalues()
	      		    	 	      賦值之後:
	      		    	 	      ● 應用Bean屬性的值 
	      		    	 	      		applyPropertyValues(beanName,mbd,bw,pvs) 
	      		    	 4-4).【Bean初始化】initializeBean(beanName,exposedObject,mbd)
	      		    	 		● 【執行Aware介面方法】invokeAwareMethods(beanName,bean) //執行xxxAware介面方法
	      		    	 			(BeanNameAware/BeanClassLoaderAware/BeanFactoryAware)
	      		    	 		● 【執行後置處理器初始化之前】applyBeanPostProcessorsBeforeInitialization(wrappedBean,beanName)
	      		    	 			BeanPostProcessor.postProcessBeforeInitialization()
	      		    	 		● 【執行初始化方法】invokeInitMethods(beanName,wrappedBean,mbd)
	      		    	 			是否為InitializingBean介面的實作，執行介面規定的初始化
	      		    	 			是否自定義初始化方法
	      		    	 		● 【執行後置處理器初始化之後】applyBeanPostProcessorsAfterInitialization
	      		    	 			BeanPostProcessor.postProcessAfterInitialization()
	      		    	 4-5).註冊Bean的銷毀方法
	      		    5).將創建的Bean添加到緩存中singletonObjects
	      		   		 ioc容器就是這些Map，很多的Map裡面保存了單實例Bean，環境訊息...

	(12).finishRefresh() //完成BeanFactory的初始化創建工作，IOC容器就創建完成
		A).initLifecycleProcessor() //初始化和生命週期有關的後置處理器 LifecycleProcessor
		      默認從容器中找是否有lifecycleProcessor的元件【LifecycleProcessor】如果沒有就new DefaultLifecycleProcessor()
		      加入到容器中
		      
		      寫一個LifecycleProcessor的實現類，可以在BeanFactory
		      void onRefresh();
		      void onClose();
      	B).getLifecycleProcessor().onRefresh();
      	      拿到前面定義的生命週期處理器(BeanFactory) 回傳onRefresh()
        C).publishEvent(new ContextRefreshedEvent(this)) //發布容器刷新完成事件
        D).liveBeansView.registerApplicationContext(this)
			
	================= 總結  ================

	1.Spring容器再啟動的時候，先會保存所有註冊進來的Bean的定義訊息
		1).xml 註冊Bean: <bean>
		2).註解方式註冊Bean: @Service、@Component、@Bean...
	2.Spring容器會合適的時機創建這些Bean
		1).用到這個bean的時候，利用getBean()創建Bean，創建好以後保存在容器中
		2).統一創建剩下所有bean的時候 //finishBeanFactoryInitialization()
	3.後置處理器 BeanPostProcessor
		1).每一個bean創建完成，都會使用各種後置處理器進行處理，來增加Bean的功能
		     ● AutowiredAnnotationBeanPostProcessor //處理自動注入
		     ● AnnotationAwareAspectJAutoProxyCreator //來做AOP
		       ... (還有很多)
		2).增強功能註解:
			● AsyncAnnotationBeanpostProcessor
			  ...(還有很多) 
		     
	
	4.事件驅動模型 :
		ApplicationListener 事件監聽
		ApplicationEventMulticaster 事件派發	
			
			
				